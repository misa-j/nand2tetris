class SnakeList {
    field SnakeNode head;
    field SnakeNode tail;
    field int thickness;
    field int direction;

    constructor SnakeList new(SnakeNode in_head, int in_thickness) {
        let head = in_head;
        let tail = in_head;
        let direction = 132;
        let thickness = in_thickness;
        return this;
    }

    method SnakeNode get_head() {
        return head;
    }

    method SnakeNode get_tail() {
        return tail;
    }

    method int get_thickness() {
        return thickness;
    }

    method void set_direction(int in_direction) {
        let direction = in_direction;
        return;
    }

    // 130 - left, 131 - up, 132 - right, 133 - down
    // prevent going in same or opposite direction
    method void move_snake_in_direction(int in_direction, int point_x, int point_y) {
        var int head_x, head_y, tail_x, tail_y;
        var int next_x, next_y;
        let head_x = head.get_x();
        let head_y = head.get_y();
        let tail_x = tail.get_x();
        let tail_y = tail.get_y();
        //let direction = in_direction;
        
        if(in_direction = 132) { // right
            let next_x = head_x + thickness;
            let next_y = head_y;
            if(~(next_y > point_y)) {
                do Main.delete_tail_rectanlge(tail_x, tail_y, thickness);
                do remove_tail();
            }
            do add_head(SnakeNode.new(next_x, next_y));
        }
        if(in_direction = 130) { // left
            let next_x = head_x - thickness;
            let next_y = head_y;
            if(~(next_y > point_y)) {
                do Main.delete_tail_rectanlge(tail_x, tail_y, thickness);
                do remove_tail();
            }
            do add_head(SnakeNode.new(next_x, next_y));
        }
        if(in_direction = 131) { // up
            let next_x = head_x;
            let next_y = head_y - thickness;
            if(~(next_y > point_y)) {
                do Main.delete_tail_rectanlge(tail_x, tail_y, thickness);
                do remove_tail();
            }
            do add_head(SnakeNode.new(next_x, next_y));
        }
        if(in_direction = 133) { // down
            let next_x = head_x;
            let next_y = head_y + thickness;
            if(~(next_y > point_y)) {
                do Main.delete_tail_rectanlge(tail_x, tail_y, thickness);
                do remove_tail();
            }
            do add_head(SnakeNode.new(next_x, next_y));
        }

        return;
    }

    method void add_head(SnakeNode in_head) {
        if(tail = null) {
            let head = in_head;
            let tail = in_head;
        } else {
            do head.set_next(in_head);
            let head = in_head;
        }

        return;
    }

    method void remove_tail() {
        var SnakeNode temp;
        let temp = tail;
        let tail = tail.get_next();
        do temp.dispose();
        return;
    }


}