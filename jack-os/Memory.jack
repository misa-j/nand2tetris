// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array free_list;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let free_list = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address]; 
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    function int find_segment(int size) {
        var int curr_segment;
        let curr_segment = free_list;

        while(ram[curr_segment + 1] < size) {
            let curr_segment = ram[curr_segment];
        }

        return curr_segment;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var int block, remaining_size, osize, start_block_addr;
        let osize = size;
        let size = size + 2;
        let block = Memory.find_segment(size);
        let remaining_size = ram[block + 1] - size;
        let start_block_addr = block + remaining_size + 4;
        do Memory.poke(block + 1, remaining_size);
        do Memory.poke(start_block_addr - 1, osize);
        
        return start_block_addr;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int head;
        let head = ram[free_list];
        let ram[free_list] = o - 2;
        let ram[ram[free_list]] = head;
        return;
    }    
}
